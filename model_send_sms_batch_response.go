/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the SendSmsBatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendSmsBatchResponse{}

// SendSmsBatchResponse struct for SendSmsBatchResponse
type SendSmsBatchResponse struct {
	Id      *string  `form:"id" json:"id,omitempty"`
	Message *string  `form:"message" json:"message,omitempty"`
	Status  []string `form:"status" json:"status,omitempty"`
}

// NewSendSmsBatchResponse instantiates a new SendSmsBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendSmsBatchResponse() *SendSmsBatchResponse {
	this := SendSmsBatchResponse{}
	return &this
}

// NewSendSmsBatchResponseWithDefaults instantiates a new SendSmsBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendSmsBatchResponseWithDefaults() *SendSmsBatchResponse {
	this := SendSmsBatchResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SendSmsBatchResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SendSmsBatchResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SendSmsBatchResponse) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SendSmsBatchResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SendSmsBatchResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SendSmsBatchResponse) SetMessage(v string) {
	o.Message = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SendSmsBatchResponse) GetStatus() []string {
	if o == nil || IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchResponse) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SendSmsBatchResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *SendSmsBatchResponse) SetStatus(v []string) {
	o.Status = v
}

func (o SendSmsBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendSmsBatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableSendSmsBatchResponse struct {
	value *SendSmsBatchResponse
	isSet bool
}

func (v NullableSendSmsBatchResponse) Get() *SendSmsBatchResponse {
	return v.value
}

func (v *NullableSendSmsBatchResponse) Set(val *SendSmsBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSendSmsBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSendSmsBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendSmsBatchResponse(val *SendSmsBatchResponse) *NullableSendSmsBatchResponse {
	return &NullableSendSmsBatchResponse{value: val, isSet: true}
}

func (v NullableSendSmsBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendSmsBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
