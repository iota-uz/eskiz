/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
	"time"
)

// checks if the MessagePart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagePart{}

// MessagePart struct for MessagePart
type MessagePart struct {
	Accept   *time.Time `form:"accept" json:"accept,omitempty"`
	Status   *string    `form:"status" json:"status,omitempty"`
	Submit   *int       `form:"submit" json:"submit,omitempty"`
	Delivery *time.Time `form:"delivery" json:"delivery,omitempty"`
}

// NewMessagePart instantiates a new MessagePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagePart() *MessagePart {
	this := MessagePart{}
	return &this
}

// NewMessagePartWithDefaults instantiates a new MessagePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagePartWithDefaults() *MessagePart {
	this := MessagePart{}
	return &this
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *MessagePart) GetAccept() time.Time {
	if o == nil || IsNil(o.Accept) {
		var ret time.Time
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePart) GetAcceptOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Accept) {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *MessagePart) HasAccept() bool {
	if o != nil && !IsNil(o.Accept) {
		return true
	}

	return false
}

// SetAccept gets a reference to the given time.Time and assigns it to the Accept field.
func (o *MessagePart) SetAccept(v time.Time) {
	o.Accept = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MessagePart) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePart) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MessagePart) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MessagePart) SetStatus(v string) {
	o.Status = &v
}

// GetSubmit returns the Submit field value if set, zero value otherwise.
func (o *MessagePart) GetSubmit() int {
	if o == nil || IsNil(o.Submit) {
		var ret int
		return ret
	}
	return *o.Submit
}

// GetSubmitOk returns a tuple with the Submit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePart) GetSubmitOk() (*int, bool) {
	if o == nil || IsNil(o.Submit) {
		return nil, false
	}
	return o.Submit, true
}

// HasSubmit returns a boolean if a field has been set.
func (o *MessagePart) HasSubmit() bool {
	if o != nil && !IsNil(o.Submit) {
		return true
	}

	return false
}

// SetSubmit gets a reference to the given int and assigns it to the Submit field.
func (o *MessagePart) SetSubmit(v int) {
	o.Submit = &v
}

// GetDelivery returns the Delivery field value if set, zero value otherwise.
func (o *MessagePart) GetDelivery() time.Time {
	if o == nil || IsNil(o.Delivery) {
		var ret time.Time
		return ret
	}
	return *o.Delivery
}

// GetDeliveryOk returns a tuple with the Delivery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePart) GetDeliveryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Delivery) {
		return nil, false
	}
	return o.Delivery, true
}

// HasDelivery returns a boolean if a field has been set.
func (o *MessagePart) HasDelivery() bool {
	if o != nil && !IsNil(o.Delivery) {
		return true
	}

	return false
}

// SetDelivery gets a reference to the given time.Time and assigns it to the Delivery field.
func (o *MessagePart) SetDelivery(v time.Time) {
	o.Delivery = &v
}

func (o MessagePart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagePart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accept) {
		toSerialize["accept"] = o.Accept
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Submit) {
		toSerialize["submit"] = o.Submit
	}
	if !IsNil(o.Delivery) {
		toSerialize["delivery"] = o.Delivery
	}
	return toSerialize, nil
}

type NullableMessagePart struct {
	value *MessagePart
	isSet bool
}

func (v NullableMessagePart) Get() *MessagePart {
	return v.value
}

func (v *NullableMessagePart) Set(val *MessagePart) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagePart) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagePart(val *MessagePart) *NullableMessagePart {
	return &NullableMessagePart{value: val, isSet: true}
}

func (v NullableMessagePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
