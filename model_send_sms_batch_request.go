/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the SendSmsBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendSmsBatchRequest{}

// SendSmsBatchRequest struct for SendSmsBatchRequest
type SendSmsBatchRequest struct {
	CallbackUrl *string                            `form:"callback_url" json:"callback_url,omitempty"`
	DispatchId  *float64                           `form:"dispatch_id" json:"dispatch_id,omitempty"`
	From        *string                            `form:"from" json:"from,omitempty"`
	Messages    []SendSmsBatchRequestMessagesInner `form:"messages" json:"messages,omitempty"`
}

// NewSendSmsBatchRequest instantiates a new SendSmsBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendSmsBatchRequest() *SendSmsBatchRequest {
	this := SendSmsBatchRequest{}
	return &this
}

// NewSendSmsBatchRequestWithDefaults instantiates a new SendSmsBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendSmsBatchRequestWithDefaults() *SendSmsBatchRequest {
	this := SendSmsBatchRequest{}
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *SendSmsBatchRequest) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *SendSmsBatchRequest) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *SendSmsBatchRequest) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetDispatchId returns the DispatchId field value if set, zero value otherwise.
func (o *SendSmsBatchRequest) GetDispatchId() float64 {
	if o == nil || IsNil(o.DispatchId) {
		var ret float64
		return ret
	}
	return *o.DispatchId
}

// GetDispatchIdOk returns a tuple with the DispatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchRequest) GetDispatchIdOk() (*float64, bool) {
	if o == nil || IsNil(o.DispatchId) {
		return nil, false
	}
	return o.DispatchId, true
}

// HasDispatchId returns a boolean if a field has been set.
func (o *SendSmsBatchRequest) HasDispatchId() bool {
	if o != nil && !IsNil(o.DispatchId) {
		return true
	}

	return false
}

// SetDispatchId gets a reference to the given float64 and assigns it to the DispatchId field.
func (o *SendSmsBatchRequest) SetDispatchId(v float64) {
	o.DispatchId = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SendSmsBatchRequest) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchRequest) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SendSmsBatchRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SendSmsBatchRequest) SetFrom(v string) {
	o.From = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *SendSmsBatchRequest) GetMessages() []SendSmsBatchRequestMessagesInner {
	if o == nil || IsNil(o.Messages) {
		var ret []SendSmsBatchRequestMessagesInner
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendSmsBatchRequest) GetMessagesOk() ([]SendSmsBatchRequestMessagesInner, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *SendSmsBatchRequest) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []SendSmsBatchRequestMessagesInner and assigns it to the Messages field.
func (o *SendSmsBatchRequest) SetMessages(v []SendSmsBatchRequestMessagesInner) {
	o.Messages = v
}

func (o SendSmsBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendSmsBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	if !IsNil(o.DispatchId) {
		toSerialize["dispatch_id"] = o.DispatchId
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	return toSerialize, nil
}

type NullableSendSmsBatchRequest struct {
	value *SendSmsBatchRequest
	isSet bool
}

func (v NullableSendSmsBatchRequest) Get() *SendSmsBatchRequest {
	return v.value
}

func (v *NullableSendSmsBatchRequest) Set(val *SendSmsBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendSmsBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendSmsBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendSmsBatchRequest(val *SendSmsBatchRequest) *NullableSendSmsBatchRequest {
	return &NullableSendSmsBatchRequest{value: val, isSet: true}
}

func (v NullableSendSmsBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendSmsBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
