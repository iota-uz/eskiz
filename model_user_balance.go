/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the UserBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserBalance{}

// UserBalance struct for UserBalance
type UserBalance struct {
	Balance *float64 `form:"balance" json:"balance,omitempty"`
}

// NewUserBalance instantiates a new UserBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBalance() *UserBalance {
	this := UserBalance{}
	return &this
}

// NewUserBalanceWithDefaults instantiates a new UserBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBalanceWithDefaults() *UserBalance {
	this := UserBalance{}
	return &this
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *UserBalance) GetBalance() float64 {
	if o == nil || IsNil(o.Balance) {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBalance) GetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *UserBalance) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *UserBalance) SetBalance(v float64) {
	o.Balance = &v
}

func (o UserBalance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableUserBalance struct {
	value *UserBalance
	isSet bool
}

func (v NullableUserBalance) Get() *UserBalance {
	return v.value
}

func (v *NullableUserBalance) Set(val *UserBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBalance(val *UserBalance) *NullableUserBalance {
	return &NullableUserBalance{value: val, isSet: true}
}

func (v NullableUserBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
