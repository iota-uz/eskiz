/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the LoginData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginData{}

// LoginData struct for LoginData
type LoginData struct {
	Token *string `form:"token" json:"token,omitempty"`
}

// NewLoginData instantiates a new LoginData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginData() *LoginData {
	this := LoginData{}
	return &this
}

// NewLoginDataWithDefaults instantiates a new LoginData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginDataWithDefaults() *LoginData {
	this := LoginData{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *LoginData) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginData) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *LoginData) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *LoginData) SetToken(v string) {
	o.Token = &v
}

func (o LoginData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableLoginData struct {
	value *LoginData
	isSet bool
}

func (v NullableLoginData) Get() *LoginData {
	return v.value
}

func (v *NullableLoginData) Set(val *LoginData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginData(val *LoginData) *NullableLoginData {
	return &NullableLoginData{value: val, isSet: true}
}

func (v NullableLoginData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
