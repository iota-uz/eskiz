/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the NormalizeSmsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NormalizeSmsResponse{}

// NormalizeSmsResponse struct for NormalizeSmsResponse
type NormalizeSmsResponse struct {
	SpecialCharacters []SpecialCharacter `form:"special_characters" json:"special_characters,omitempty"`
	Recommendations   []Recommendation   `form:"recommendations" json:"recommendations,omitempty"`
	Message           *string            `form:"message" json:"message,omitempty"`
}

// NewNormalizeSmsResponse instantiates a new NormalizeSmsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNormalizeSmsResponse() *NormalizeSmsResponse {
	this := NormalizeSmsResponse{}
	return &this
}

// NewNormalizeSmsResponseWithDefaults instantiates a new NormalizeSmsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNormalizeSmsResponseWithDefaults() *NormalizeSmsResponse {
	this := NormalizeSmsResponse{}
	return &this
}

// GetSpecialCharacters returns the SpecialCharacters field value if set, zero value otherwise.
func (o *NormalizeSmsResponse) GetSpecialCharacters() []SpecialCharacter {
	if o == nil || IsNil(o.SpecialCharacters) {
		var ret []SpecialCharacter
		return ret
	}
	return o.SpecialCharacters
}

// GetSpecialCharactersOk returns a tuple with the SpecialCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizeSmsResponse) GetSpecialCharactersOk() ([]SpecialCharacter, bool) {
	if o == nil || IsNil(o.SpecialCharacters) {
		return nil, false
	}
	return o.SpecialCharacters, true
}

// HasSpecialCharacters returns a boolean if a field has been set.
func (o *NormalizeSmsResponse) HasSpecialCharacters() bool {
	if o != nil && !IsNil(o.SpecialCharacters) {
		return true
	}

	return false
}

// SetSpecialCharacters gets a reference to the given []SpecialCharacter and assigns it to the SpecialCharacters field.
func (o *NormalizeSmsResponse) SetSpecialCharacters(v []SpecialCharacter) {
	o.SpecialCharacters = v
}

// GetRecommendations returns the Recommendations field value if set, zero value otherwise.
func (o *NormalizeSmsResponse) GetRecommendations() []Recommendation {
	if o == nil || IsNil(o.Recommendations) {
		var ret []Recommendation
		return ret
	}
	return o.Recommendations
}

// GetRecommendationsOk returns a tuple with the Recommendations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizeSmsResponse) GetRecommendationsOk() ([]Recommendation, bool) {
	if o == nil || IsNil(o.Recommendations) {
		return nil, false
	}
	return o.Recommendations, true
}

// HasRecommendations returns a boolean if a field has been set.
func (o *NormalizeSmsResponse) HasRecommendations() bool {
	if o != nil && !IsNil(o.Recommendations) {
		return true
	}

	return false
}

// SetRecommendations gets a reference to the given []Recommendation and assigns it to the Recommendations field.
func (o *NormalizeSmsResponse) SetRecommendations(v []Recommendation) {
	o.Recommendations = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NormalizeSmsResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizeSmsResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NormalizeSmsResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NormalizeSmsResponse) SetMessage(v string) {
	o.Message = &v
}

func (o NormalizeSmsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NormalizeSmsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpecialCharacters) {
		toSerialize["special_characters"] = o.SpecialCharacters
	}
	if !IsNil(o.Recommendations) {
		toSerialize["recommendations"] = o.Recommendations
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableNormalizeSmsResponse struct {
	value *NormalizeSmsResponse
	isSet bool
}

func (v NullableNormalizeSmsResponse) Get() *NormalizeSmsResponse {
	return v.value
}

func (v *NullableNormalizeSmsResponse) Set(val *NormalizeSmsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizeSmsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizeSmsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizeSmsResponse(val *NormalizeSmsResponse) *NullableNormalizeSmsResponse {
	return &NullableNormalizeSmsResponse{value: val, isSet: true}
}

func (v NullableNormalizeSmsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizeSmsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
