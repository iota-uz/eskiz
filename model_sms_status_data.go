/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
	"time"
)

// checks if the SmsStatusData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsStatusData{}

// SmsStatusData struct for SmsStatusData
type SmsStatusData struct {
	Id             *int                      `form:"id" json:"id,omitempty"`
	UserId         *int                      `form:"user_id" json:"user_id,omitempty"`
	CountryId      *int                      `form:"country_id" json:"country_id,omitempty"`
	ConnectionId   *int                      `form:"connection_id" json:"connection_id,omitempty"`
	SmscId         *int                      `form:"smsc_id" json:"smsc_id,omitempty"`
	DispatchId     NullableString            `form:"dispatch_id" json:"dispatch_id,omitempty"`
	UserSmsId      NullableString            `form:"user_sms_id" json:"user_sms_id,omitempty"`
	RequestId      *string                   `form:"request_id" json:"request_id,omitempty"`
	Price          *float64                  `form:"price" json:"price,omitempty"`
	TotalPrice     *float64                  `form:"total_price" json:"total_price,omitempty"`
	IsAd           *bool                     `form:"is_ad" json:"is_ad,omitempty"`
	Nick           *string                   `form:"nick" json:"nick,omitempty"`
	To             *string                   `form:"to" json:"to,omitempty"`
	Message        *string                   `form:"message" json:"message,omitempty"`
	Encoding       *int                      `form:"encoding" json:"encoding,omitempty"`
	PartsCount     *int                      `form:"parts_count" json:"parts_count,omitempty"`
	Parts          *map[string]SmsStatusPart `form:"parts" json:"parts,omitempty"`
	Status         *string                   `form:"status" json:"status,omitempty"`
	SmscData       *map[string][]string      `form:"smsc_data" json:"smsc_data,omitempty"`
	SentAt         *time.Time                `form:"sent_at" json:"sent_at,omitempty"`
	SubmitSmRespAt *time.Time                `form:"submit_sm_resp_at" json:"submit_sm_resp_at,omitempty"`
	DeliverySmAt   *time.Time                `form:"delivery_sm_at" json:"delivery_sm_at,omitempty"`
	CreatedAt      *time.Time                `form:"created_at" json:"created_at,omitempty"`
	UpdatedAt      *time.Time                `form:"updated_at" json:"updated_at,omitempty"`
}

// NewSmsStatusData instantiates a new SmsStatusData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsStatusData() *SmsStatusData {
	this := SmsStatusData{}
	return &this
}

// NewSmsStatusDataWithDefaults instantiates a new SmsStatusData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsStatusDataWithDefaults() *SmsStatusData {
	this := SmsStatusData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmsStatusData) GetId() int {
	if o == nil || IsNil(o.Id) {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetIdOk() (*int, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmsStatusData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *SmsStatusData) SetId(v int) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SmsStatusData) GetUserId() int {
	if o == nil || IsNil(o.UserId) {
		var ret int
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetUserIdOk() (*int, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SmsStatusData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int and assigns it to the UserId field.
func (o *SmsStatusData) SetUserId(v int) {
	o.UserId = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *SmsStatusData) GetCountryId() int {
	if o == nil || IsNil(o.CountryId) {
		var ret int
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetCountryIdOk() (*int, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *SmsStatusData) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given int and assigns it to the CountryId field.
func (o *SmsStatusData) SetCountryId(v int) {
	o.CountryId = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *SmsStatusData) GetConnectionId() int {
	if o == nil || IsNil(o.ConnectionId) {
		var ret int
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetConnectionIdOk() (*int, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *SmsStatusData) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given int and assigns it to the ConnectionId field.
func (o *SmsStatusData) SetConnectionId(v int) {
	o.ConnectionId = &v
}

// GetSmscId returns the SmscId field value if set, zero value otherwise.
func (o *SmsStatusData) GetSmscId() int {
	if o == nil || IsNil(o.SmscId) {
		var ret int
		return ret
	}
	return *o.SmscId
}

// GetSmscIdOk returns a tuple with the SmscId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetSmscIdOk() (*int, bool) {
	if o == nil || IsNil(o.SmscId) {
		return nil, false
	}
	return o.SmscId, true
}

// HasSmscId returns a boolean if a field has been set.
func (o *SmsStatusData) HasSmscId() bool {
	if o != nil && !IsNil(o.SmscId) {
		return true
	}

	return false
}

// SetSmscId gets a reference to the given int and assigns it to the SmscId field.
func (o *SmsStatusData) SetSmscId(v int) {
	o.SmscId = &v
}

// GetDispatchId returns the DispatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmsStatusData) GetDispatchId() string {
	if o == nil || IsNil(o.DispatchId.Get()) {
		var ret string
		return ret
	}
	return *o.DispatchId.Get()
}

// GetDispatchIdOk returns a tuple with the DispatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmsStatusData) GetDispatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DispatchId.Get(), o.DispatchId.IsSet()
}

// HasDispatchId returns a boolean if a field has been set.
func (o *SmsStatusData) HasDispatchId() bool {
	if o != nil && o.DispatchId.IsSet() {
		return true
	}

	return false
}

// SetDispatchId gets a reference to the given NullableString and assigns it to the DispatchId field.
func (o *SmsStatusData) SetDispatchId(v string) {
	o.DispatchId.Set(&v)
}

// SetDispatchIdNil sets the value for DispatchId to be an explicit nil
func (o *SmsStatusData) SetDispatchIdNil() {
	o.DispatchId.Set(nil)
}

// UnsetDispatchId ensures that no value is present for DispatchId, not even an explicit nil
func (o *SmsStatusData) UnsetDispatchId() {
	o.DispatchId.Unset()
}

// GetUserSmsId returns the UserSmsId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmsStatusData) GetUserSmsId() string {
	if o == nil || IsNil(o.UserSmsId.Get()) {
		var ret string
		return ret
	}
	return *o.UserSmsId.Get()
}

// GetUserSmsIdOk returns a tuple with the UserSmsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmsStatusData) GetUserSmsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserSmsId.Get(), o.UserSmsId.IsSet()
}

// HasUserSmsId returns a boolean if a field has been set.
func (o *SmsStatusData) HasUserSmsId() bool {
	if o != nil && o.UserSmsId.IsSet() {
		return true
	}

	return false
}

// SetUserSmsId gets a reference to the given NullableString and assigns it to the UserSmsId field.
func (o *SmsStatusData) SetUserSmsId(v string) {
	o.UserSmsId.Set(&v)
}

// SetUserSmsIdNil sets the value for UserSmsId to be an explicit nil
func (o *SmsStatusData) SetUserSmsIdNil() {
	o.UserSmsId.Set(nil)
}

// UnsetUserSmsId ensures that no value is present for UserSmsId, not even an explicit nil
func (o *SmsStatusData) UnsetUserSmsId() {
	o.UserSmsId.Unset()
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *SmsStatusData) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *SmsStatusData) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *SmsStatusData) SetRequestId(v string) {
	o.RequestId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SmsStatusData) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SmsStatusData) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *SmsStatusData) SetPrice(v float64) {
	o.Price = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *SmsStatusData) GetTotalPrice() float64 {
	if o == nil || IsNil(o.TotalPrice) {
		var ret float64
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetTotalPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalPrice) {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *SmsStatusData) HasTotalPrice() bool {
	if o != nil && !IsNil(o.TotalPrice) {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float64 and assigns it to the TotalPrice field.
func (o *SmsStatusData) SetTotalPrice(v float64) {
	o.TotalPrice = &v
}

// GetIsAd returns the IsAd field value if set, zero value otherwise.
func (o *SmsStatusData) GetIsAd() bool {
	if o == nil || IsNil(o.IsAd) {
		var ret bool
		return ret
	}
	return *o.IsAd
}

// GetIsAdOk returns a tuple with the IsAd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetIsAdOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAd) {
		return nil, false
	}
	return o.IsAd, true
}

// HasIsAd returns a boolean if a field has been set.
func (o *SmsStatusData) HasIsAd() bool {
	if o != nil && !IsNil(o.IsAd) {
		return true
	}

	return false
}

// SetIsAd gets a reference to the given bool and assigns it to the IsAd field.
func (o *SmsStatusData) SetIsAd(v bool) {
	o.IsAd = &v
}

// GetNick returns the Nick field value if set, zero value otherwise.
func (o *SmsStatusData) GetNick() string {
	if o == nil || IsNil(o.Nick) {
		var ret string
		return ret
	}
	return *o.Nick
}

// GetNickOk returns a tuple with the Nick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetNickOk() (*string, bool) {
	if o == nil || IsNil(o.Nick) {
		return nil, false
	}
	return o.Nick, true
}

// HasNick returns a boolean if a field has been set.
func (o *SmsStatusData) HasNick() bool {
	if o != nil && !IsNil(o.Nick) {
		return true
	}

	return false
}

// SetNick gets a reference to the given string and assigns it to the Nick field.
func (o *SmsStatusData) SetNick(v string) {
	o.Nick = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SmsStatusData) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SmsStatusData) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *SmsStatusData) SetTo(v string) {
	o.To = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SmsStatusData) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SmsStatusData) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SmsStatusData) SetMessage(v string) {
	o.Message = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *SmsStatusData) GetEncoding() int {
	if o == nil || IsNil(o.Encoding) {
		var ret int
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetEncodingOk() (*int, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *SmsStatusData) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given int and assigns it to the Encoding field.
func (o *SmsStatusData) SetEncoding(v int) {
	o.Encoding = &v
}

// GetPartsCount returns the PartsCount field value if set, zero value otherwise.
func (o *SmsStatusData) GetPartsCount() int {
	if o == nil || IsNil(o.PartsCount) {
		var ret int
		return ret
	}
	return *o.PartsCount
}

// GetPartsCountOk returns a tuple with the PartsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetPartsCountOk() (*int, bool) {
	if o == nil || IsNil(o.PartsCount) {
		return nil, false
	}
	return o.PartsCount, true
}

// HasPartsCount returns a boolean if a field has been set.
func (o *SmsStatusData) HasPartsCount() bool {
	if o != nil && !IsNil(o.PartsCount) {
		return true
	}

	return false
}

// SetPartsCount gets a reference to the given int and assigns it to the PartsCount field.
func (o *SmsStatusData) SetPartsCount(v int) {
	o.PartsCount = &v
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *SmsStatusData) GetParts() map[string]SmsStatusPart {
	if o == nil || IsNil(o.Parts) {
		var ret map[string]SmsStatusPart
		return ret
	}
	return *o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetPartsOk() (*map[string]SmsStatusPart, bool) {
	if o == nil || IsNil(o.Parts) {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *SmsStatusData) HasParts() bool {
	if o != nil && !IsNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given map[string]SmsStatusPart and assigns it to the Parts field.
func (o *SmsStatusData) SetParts(v map[string]SmsStatusPart) {
	o.Parts = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SmsStatusData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SmsStatusData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SmsStatusData) SetStatus(v string) {
	o.Status = &v
}

// GetSmscData returns the SmscData field value if set, zero value otherwise.
func (o *SmsStatusData) GetSmscData() map[string][]string {
	if o == nil || IsNil(o.SmscData) {
		var ret map[string][]string
		return ret
	}
	return *o.SmscData
}

// GetSmscDataOk returns a tuple with the SmscData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetSmscDataOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.SmscData) {
		return nil, false
	}
	return o.SmscData, true
}

// HasSmscData returns a boolean if a field has been set.
func (o *SmsStatusData) HasSmscData() bool {
	if o != nil && !IsNil(o.SmscData) {
		return true
	}

	return false
}

// SetSmscData gets a reference to the given map[string][]string and assigns it to the SmscData field.
func (o *SmsStatusData) SetSmscData(v map[string][]string) {
	o.SmscData = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *SmsStatusData) GetSentAt() time.Time {
	if o == nil || IsNil(o.SentAt) {
		var ret time.Time
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetSentAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *SmsStatusData) HasSentAt() bool {
	if o != nil && !IsNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given time.Time and assigns it to the SentAt field.
func (o *SmsStatusData) SetSentAt(v time.Time) {
	o.SentAt = &v
}

// GetSubmitSmRespAt returns the SubmitSmRespAt field value if set, zero value otherwise.
func (o *SmsStatusData) GetSubmitSmRespAt() time.Time {
	if o == nil || IsNil(o.SubmitSmRespAt) {
		var ret time.Time
		return ret
	}
	return *o.SubmitSmRespAt
}

// GetSubmitSmRespAtOk returns a tuple with the SubmitSmRespAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetSubmitSmRespAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmitSmRespAt) {
		return nil, false
	}
	return o.SubmitSmRespAt, true
}

// HasSubmitSmRespAt returns a boolean if a field has been set.
func (o *SmsStatusData) HasSubmitSmRespAt() bool {
	if o != nil && !IsNil(o.SubmitSmRespAt) {
		return true
	}

	return false
}

// SetSubmitSmRespAt gets a reference to the given time.Time and assigns it to the SubmitSmRespAt field.
func (o *SmsStatusData) SetSubmitSmRespAt(v time.Time) {
	o.SubmitSmRespAt = &v
}

// GetDeliverySmAt returns the DeliverySmAt field value if set, zero value otherwise.
func (o *SmsStatusData) GetDeliverySmAt() time.Time {
	if o == nil || IsNil(o.DeliverySmAt) {
		var ret time.Time
		return ret
	}
	return *o.DeliverySmAt
}

// GetDeliverySmAtOk returns a tuple with the DeliverySmAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetDeliverySmAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeliverySmAt) {
		return nil, false
	}
	return o.DeliverySmAt, true
}

// HasDeliverySmAt returns a boolean if a field has been set.
func (o *SmsStatusData) HasDeliverySmAt() bool {
	if o != nil && !IsNil(o.DeliverySmAt) {
		return true
	}

	return false
}

// SetDeliverySmAt gets a reference to the given time.Time and assigns it to the DeliverySmAt field.
func (o *SmsStatusData) SetDeliverySmAt(v time.Time) {
	o.DeliverySmAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SmsStatusData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SmsStatusData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SmsStatusData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SmsStatusData) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SmsStatusData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SmsStatusData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SmsStatusData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsStatusData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.SmscId) {
		toSerialize["smsc_id"] = o.SmscId
	}
	if o.DispatchId.IsSet() {
		toSerialize["dispatch_id"] = o.DispatchId.Get()
	}
	if o.UserSmsId.IsSet() {
		toSerialize["user_sms_id"] = o.UserSmsId.Get()
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.TotalPrice) {
		toSerialize["total_price"] = o.TotalPrice
	}
	if !IsNil(o.IsAd) {
		toSerialize["is_ad"] = o.IsAd
	}
	if !IsNil(o.Nick) {
		toSerialize["nick"] = o.Nick
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.PartsCount) {
		toSerialize["parts_count"] = o.PartsCount
	}
	if !IsNil(o.Parts) {
		toSerialize["parts"] = o.Parts
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SmscData) {
		toSerialize["smsc_data"] = o.SmscData
	}
	if !IsNil(o.SentAt) {
		toSerialize["sent_at"] = o.SentAt
	}
	if !IsNil(o.SubmitSmRespAt) {
		toSerialize["submit_sm_resp_at"] = o.SubmitSmRespAt
	}
	if !IsNil(o.DeliverySmAt) {
		toSerialize["delivery_sm_at"] = o.DeliverySmAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableSmsStatusData struct {
	value *SmsStatusData
	isSet bool
}

func (v NullableSmsStatusData) Get() *SmsStatusData {
	return v.value
}

func (v *NullableSmsStatusData) Set(val *SmsStatusData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsStatusData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsStatusData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsStatusData(val *SmsStatusData) *NullableSmsStatusData {
	return &NullableSmsStatusData{value: val, isSet: true}
}

func (v NullableSmsStatusData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsStatusData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
