/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the UserLimitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLimitResponse{}

// UserLimitResponse struct for UserLimitResponse
type UserLimitResponse struct {
	Data   *UserBalance `form:"data" json:"data,omitempty"`
	Status *string      `form:"status" json:"status,omitempty"`
}

// NewUserLimitResponse instantiates a new UserLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimitResponse() *UserLimitResponse {
	this := UserLimitResponse{}
	return &this
}

// NewUserLimitResponseWithDefaults instantiates a new UserLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitResponseWithDefaults() *UserLimitResponse {
	this := UserLimitResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UserLimitResponse) GetData() UserBalance {
	if o == nil || IsNil(o.Data) {
		var ret UserBalance
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimitResponse) GetDataOk() (*UserBalance, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UserLimitResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given UserBalance and assigns it to the Data field.
func (o *UserLimitResponse) SetData(v UserBalance) {
	o.Data = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserLimitResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimitResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserLimitResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UserLimitResponse) SetStatus(v string) {
	o.Status = &v
}

func (o UserLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLimitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableUserLimitResponse struct {
	value *UserLimitResponse
	isSet bool
}

func (v NullableUserLimitResponse) Get() *UserLimitResponse {
	return v.value
}

func (v *NullableUserLimitResponse) Set(val *UserLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimitResponse(val *UserLimitResponse) *NullableUserLimitResponse {
	return &NullableUserLimitResponse{value: val, isSet: true}
}

func (v NullableUserLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
