/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the SmsStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsStatusResponse{}

// SmsStatusResponse struct for SmsStatusResponse
type SmsStatusResponse struct {
	Status *string        `form:"status" json:"status,omitempty"`
	Data   *SmsStatusData `form:"data" json:"data,omitempty"`
	Id     NullableString `form:"id" json:"id,omitempty"`
}

// NewSmsStatusResponse instantiates a new SmsStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsStatusResponse() *SmsStatusResponse {
	this := SmsStatusResponse{}
	return &this
}

// NewSmsStatusResponseWithDefaults instantiates a new SmsStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsStatusResponseWithDefaults() *SmsStatusResponse {
	this := SmsStatusResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SmsStatusResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SmsStatusResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SmsStatusResponse) SetStatus(v string) {
	o.Status = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SmsStatusResponse) GetData() SmsStatusData {
	if o == nil || IsNil(o.Data) {
		var ret SmsStatusData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusResponse) GetDataOk() (*SmsStatusData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SmsStatusResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SmsStatusData and assigns it to the Data field.
func (o *SmsStatusResponse) SetData(v SmsStatusData) {
	o.Data = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmsStatusResponse) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmsStatusResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SmsStatusResponse) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SmsStatusResponse) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *SmsStatusResponse) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SmsStatusResponse) UnsetId() {
	o.Id.Unset()
}

func (o SmsStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	return toSerialize, nil
}

type NullableSmsStatusResponse struct {
	value *SmsStatusResponse
	isSet bool
}

func (v NullableSmsStatusResponse) Get() *SmsStatusResponse {
	return v.value
}

func (v *NullableSmsStatusResponse) Set(val *SmsStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsStatusResponse(val *SmsStatusResponse) *NullableSmsStatusResponse {
	return &NullableSmsStatusResponse{value: val, isSet: true}
}

func (v NullableSmsStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
