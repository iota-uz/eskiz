/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the SmsLogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsLogsResponse{}

// SmsLogsResponse struct for SmsLogsResponse
type SmsLogsResponse struct {
	Messages      []LogMessage `form:"messages" json:"messages,omitempty"`
	MessagesCount *int         `form:"messages_count" json:"messages_count,omitempty"`
}

// NewSmsLogsResponse instantiates a new SmsLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsLogsResponse() *SmsLogsResponse {
	this := SmsLogsResponse{}
	return &this
}

// NewSmsLogsResponseWithDefaults instantiates a new SmsLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsLogsResponseWithDefaults() *SmsLogsResponse {
	this := SmsLogsResponse{}
	return &this
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *SmsLogsResponse) GetMessages() []LogMessage {
	if o == nil || IsNil(o.Messages) {
		var ret []LogMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLogsResponse) GetMessagesOk() ([]LogMessage, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *SmsLogsResponse) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []LogMessage and assigns it to the Messages field.
func (o *SmsLogsResponse) SetMessages(v []LogMessage) {
	o.Messages = v
}

// GetMessagesCount returns the MessagesCount field value if set, zero value otherwise.
func (o *SmsLogsResponse) GetMessagesCount() int {
	if o == nil || IsNil(o.MessagesCount) {
		var ret int
		return ret
	}
	return *o.MessagesCount
}

// GetMessagesCountOk returns a tuple with the MessagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsLogsResponse) GetMessagesCountOk() (*int, bool) {
	if o == nil || IsNil(o.MessagesCount) {
		return nil, false
	}
	return o.MessagesCount, true
}

// HasMessagesCount returns a boolean if a field has been set.
func (o *SmsLogsResponse) HasMessagesCount() bool {
	if o != nil && !IsNil(o.MessagesCount) {
		return true
	}

	return false
}

// SetMessagesCount gets a reference to the given int and assigns it to the MessagesCount field.
func (o *SmsLogsResponse) SetMessagesCount(v int) {
	o.MessagesCount = &v
}

func (o SmsLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsLogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.MessagesCount) {
		toSerialize["messages_count"] = o.MessagesCount
	}
	return toSerialize, nil
}

type NullableSmsLogsResponse struct {
	value *SmsLogsResponse
	isSet bool
}

func (v NullableSmsLogsResponse) Get() *SmsLogsResponse {
	return v.value
}

func (v *NullableSmsLogsResponse) Set(val *SmsLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsLogsResponse(val *SmsLogsResponse) *NullableSmsLogsResponse {
	return &NullableSmsLogsResponse{value: val, isSet: true}
}

func (v NullableSmsLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
