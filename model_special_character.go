/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the SpecialCharacter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialCharacter{}

// SpecialCharacter struct for SpecialCharacter
type SpecialCharacter struct {
	Position *int    `form:"position" json:"position,omitempty"`
	Code     *string `form:"code" json:"code,omitempty"`
	Char     *string `form:"char" json:"char,omitempty"`
}

// NewSpecialCharacter instantiates a new SpecialCharacter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialCharacter() *SpecialCharacter {
	this := SpecialCharacter{}
	return &this
}

// NewSpecialCharacterWithDefaults instantiates a new SpecialCharacter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialCharacterWithDefaults() *SpecialCharacter {
	this := SpecialCharacter{}
	return &this
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *SpecialCharacter) GetPosition() int {
	if o == nil || IsNil(o.Position) {
		var ret int
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialCharacter) GetPositionOk() (*int, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *SpecialCharacter) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int and assigns it to the Position field.
func (o *SpecialCharacter) SetPosition(v int) {
	o.Position = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SpecialCharacter) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialCharacter) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SpecialCharacter) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SpecialCharacter) SetCode(v string) {
	o.Code = &v
}

// GetChar returns the Char field value if set, zero value otherwise.
func (o *SpecialCharacter) GetChar() string {
	if o == nil || IsNil(o.Char) {
		var ret string
		return ret
	}
	return *o.Char
}

// GetCharOk returns a tuple with the Char field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialCharacter) GetCharOk() (*string, bool) {
	if o == nil || IsNil(o.Char) {
		return nil, false
	}
	return o.Char, true
}

// HasChar returns a boolean if a field has been set.
func (o *SpecialCharacter) HasChar() bool {
	if o != nil && !IsNil(o.Char) {
		return true
	}

	return false
}

// SetChar gets a reference to the given string and assigns it to the Char field.
func (o *SpecialCharacter) SetChar(v string) {
	o.Char = &v
}

func (o SpecialCharacter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialCharacter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Char) {
		toSerialize["char"] = o.Char
	}
	return toSerialize, nil
}

type NullableSpecialCharacter struct {
	value *SpecialCharacter
	isSet bool
}

func (v NullableSpecialCharacter) Get() *SpecialCharacter {
	return v.value
}

func (v *NullableSpecialCharacter) Set(val *SpecialCharacter) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialCharacter) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialCharacter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialCharacter(val *SpecialCharacter) *NullableSpecialCharacter {
	return &NullableSpecialCharacter{value: val, isSet: true}
}

func (v NullableSpecialCharacter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialCharacter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
