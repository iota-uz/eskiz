/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
)

// checks if the RefreshTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefreshTokenResponse{}

// RefreshTokenResponse struct for RefreshTokenResponse
type RefreshTokenResponse struct {
	Message   *string    `form:"message" json:"message,omitempty"`
	Data      *LoginData `form:"data" json:"data,omitempty"`
	TokenType *string    `form:"token_type" json:"token_type,omitempty"`
}

// NewRefreshTokenResponse instantiates a new RefreshTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshTokenResponse() *RefreshTokenResponse {
	this := RefreshTokenResponse{}
	return &this
}

// NewRefreshTokenResponseWithDefaults instantiates a new RefreshTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshTokenResponseWithDefaults() *RefreshTokenResponse {
	this := RefreshTokenResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RefreshTokenResponse) SetMessage(v string) {
	o.Message = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetData() LoginData {
	if o == nil || IsNil(o.Data) {
		var ret LoginData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetDataOk() (*LoginData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given LoginData and assigns it to the Data field.
func (o *RefreshTokenResponse) SetData(v LoginData) {
	o.Data = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *RefreshTokenResponse) SetTokenType(v string) {
	o.TokenType = &v
}

func (o RefreshTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefreshTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	return toSerialize, nil
}

type NullableRefreshTokenResponse struct {
	value *RefreshTokenResponse
	isSet bool
}

func (v NullableRefreshTokenResponse) Get() *RefreshTokenResponse {
	return v.value
}

func (v *NullableRefreshTokenResponse) Set(val *RefreshTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshTokenResponse(val *RefreshTokenResponse) *NullableRefreshTokenResponse {
	return &NullableRefreshTokenResponse{value: val, isSet: true}
}

func (v NullableRefreshTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
