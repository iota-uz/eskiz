/*
СМС шлюз от Eskiz.uz

Отправляйте СМС по всему миру, в любом количестве!  В тестовом статусе для отправки тестовых смс сообщений, Вы можете использовать только нижеуказанные тексты:  - Это тест от Eskiz      - Bu Eskiz dan test      - This is test from Eskiz

API version: 1.0.0
Contact: danil@iota.uz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eskizapi

import (
	"encoding/json"
	"time"
)

// checks if the SmsStatusPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsStatusPart{}

// SmsStatusPart struct for SmsStatusPart
type SmsStatusPart struct {
	Group        *int       `form:"group" json:"group,omitempty"`
	Accepted     *bool      `form:"accepted" json:"accepted,omitempty"`
	DlrTime      *time.Time `form:"dlr_time" json:"dlr_time,omitempty"`
	DlrState     *string    `form:"dlr_state" json:"dlr_state,omitempty"`
	PartIndex    *int       `form:"part_index" json:"part_index,omitempty"`
	AcceptTime   *time.Time `form:"accept_time" json:"accept_time,omitempty"`
	AcceptStatus *int       `form:"accept_status" json:"accept_status,omitempty"`
}

// NewSmsStatusPart instantiates a new SmsStatusPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsStatusPart() *SmsStatusPart {
	this := SmsStatusPart{}
	return &this
}

// NewSmsStatusPartWithDefaults instantiates a new SmsStatusPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsStatusPartWithDefaults() *SmsStatusPart {
	this := SmsStatusPart{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SmsStatusPart) GetGroup() int {
	if o == nil || IsNil(o.Group) {
		var ret int
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetGroupOk() (*int, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SmsStatusPart) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int and assigns it to the Group field.
func (o *SmsStatusPart) SetGroup(v int) {
	o.Group = &v
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *SmsStatusPart) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *SmsStatusPart) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *SmsStatusPart) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetDlrTime returns the DlrTime field value if set, zero value otherwise.
func (o *SmsStatusPart) GetDlrTime() time.Time {
	if o == nil || IsNil(o.DlrTime) {
		var ret time.Time
		return ret
	}
	return *o.DlrTime
}

// GetDlrTimeOk returns a tuple with the DlrTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetDlrTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DlrTime) {
		return nil, false
	}
	return o.DlrTime, true
}

// HasDlrTime returns a boolean if a field has been set.
func (o *SmsStatusPart) HasDlrTime() bool {
	if o != nil && !IsNil(o.DlrTime) {
		return true
	}

	return false
}

// SetDlrTime gets a reference to the given time.Time and assigns it to the DlrTime field.
func (o *SmsStatusPart) SetDlrTime(v time.Time) {
	o.DlrTime = &v
}

// GetDlrState returns the DlrState field value if set, zero value otherwise.
func (o *SmsStatusPart) GetDlrState() string {
	if o == nil || IsNil(o.DlrState) {
		var ret string
		return ret
	}
	return *o.DlrState
}

// GetDlrStateOk returns a tuple with the DlrState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetDlrStateOk() (*string, bool) {
	if o == nil || IsNil(o.DlrState) {
		return nil, false
	}
	return o.DlrState, true
}

// HasDlrState returns a boolean if a field has been set.
func (o *SmsStatusPart) HasDlrState() bool {
	if o != nil && !IsNil(o.DlrState) {
		return true
	}

	return false
}

// SetDlrState gets a reference to the given string and assigns it to the DlrState field.
func (o *SmsStatusPart) SetDlrState(v string) {
	o.DlrState = &v
}

// GetPartIndex returns the PartIndex field value if set, zero value otherwise.
func (o *SmsStatusPart) GetPartIndex() int {
	if o == nil || IsNil(o.PartIndex) {
		var ret int
		return ret
	}
	return *o.PartIndex
}

// GetPartIndexOk returns a tuple with the PartIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetPartIndexOk() (*int, bool) {
	if o == nil || IsNil(o.PartIndex) {
		return nil, false
	}
	return o.PartIndex, true
}

// HasPartIndex returns a boolean if a field has been set.
func (o *SmsStatusPart) HasPartIndex() bool {
	if o != nil && !IsNil(o.PartIndex) {
		return true
	}

	return false
}

// SetPartIndex gets a reference to the given int and assigns it to the PartIndex field.
func (o *SmsStatusPart) SetPartIndex(v int) {
	o.PartIndex = &v
}

// GetAcceptTime returns the AcceptTime field value if set, zero value otherwise.
func (o *SmsStatusPart) GetAcceptTime() time.Time {
	if o == nil || IsNil(o.AcceptTime) {
		var ret time.Time
		return ret
	}
	return *o.AcceptTime
}

// GetAcceptTimeOk returns a tuple with the AcceptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetAcceptTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptTime) {
		return nil, false
	}
	return o.AcceptTime, true
}

// HasAcceptTime returns a boolean if a field has been set.
func (o *SmsStatusPart) HasAcceptTime() bool {
	if o != nil && !IsNil(o.AcceptTime) {
		return true
	}

	return false
}

// SetAcceptTime gets a reference to the given time.Time and assigns it to the AcceptTime field.
func (o *SmsStatusPart) SetAcceptTime(v time.Time) {
	o.AcceptTime = &v
}

// GetAcceptStatus returns the AcceptStatus field value if set, zero value otherwise.
func (o *SmsStatusPart) GetAcceptStatus() int {
	if o == nil || IsNil(o.AcceptStatus) {
		var ret int
		return ret
	}
	return *o.AcceptStatus
}

// GetAcceptStatusOk returns a tuple with the AcceptStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsStatusPart) GetAcceptStatusOk() (*int, bool) {
	if o == nil || IsNil(o.AcceptStatus) {
		return nil, false
	}
	return o.AcceptStatus, true
}

// HasAcceptStatus returns a boolean if a field has been set.
func (o *SmsStatusPart) HasAcceptStatus() bool {
	if o != nil && !IsNil(o.AcceptStatus) {
		return true
	}

	return false
}

// SetAcceptStatus gets a reference to the given int and assigns it to the AcceptStatus field.
func (o *SmsStatusPart) SetAcceptStatus(v int) {
	o.AcceptStatus = &v
}

func (o SmsStatusPart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsStatusPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.DlrTime) {
		toSerialize["dlr_time"] = o.DlrTime
	}
	if !IsNil(o.DlrState) {
		toSerialize["dlr_state"] = o.DlrState
	}
	if !IsNil(o.PartIndex) {
		toSerialize["part_index"] = o.PartIndex
	}
	if !IsNil(o.AcceptTime) {
		toSerialize["accept_time"] = o.AcceptTime
	}
	if !IsNil(o.AcceptStatus) {
		toSerialize["accept_status"] = o.AcceptStatus
	}
	return toSerialize, nil
}

type NullableSmsStatusPart struct {
	value *SmsStatusPart
	isSet bool
}

func (v NullableSmsStatusPart) Get() *SmsStatusPart {
	return v.value
}

func (v *NullableSmsStatusPart) Set(val *SmsStatusPart) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsStatusPart) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsStatusPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsStatusPart(val *SmsStatusPart) *NullableSmsStatusPart {
	return &NullableSmsStatusPart{value: val, isSet: true}
}

func (v NullableSmsStatusPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsStatusPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
